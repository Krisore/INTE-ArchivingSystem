@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@layout MainLayout
<AuthorizeView>
    <Authorized>
        <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
            <ActivatorContent>
                <MudChip Color="Color.Secondary">
                    @context.User.Identity?.Name
                    <MudAvatar Size="Size.Small" Color="Color.Primary" Class="ml-2">
                        @GetInitial(context.User.Identity?.Name!)</MudAvatar>
                </MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem @onclick="BeginLogout" Color="Color.Default">Sign out
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudButton DisableElevation="true" Size="Size.Small" Href="/siginUser" Variant="Variant.Filled"
            Color="Color.Primary" Class="rounded-0">
            Sign In
        </MudButton>
    </NotAuthorized>
</AuthorizeView>
@code {
    bool _isExpanded = true;
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    public char GetInitial(string name)
    {
        char[] Letters = name.ToArray();
        return Letters[0];
    }
}
